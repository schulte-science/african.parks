input$filter_species = NULL
df <- rv$trnl
# Apply filters only if something is selected
if (!is.null(input$filter_park) && length(input$filter_park) > 0) {
df <- df[df$name_of_park %in% input$filter_park, ]
}
if (!is.null(input$filter_species) && length(input$filter_species) > 0) {
df <- df[df$DNA_Common_Host %in% input$filter_species, ]
}
df
View(df)
# Create tmp_wide
if (!is.null(input$filter_species)) {
tmp_wide <- df |>
dplyr::filter(name_of_park %in% input$filter_park,
DNA_Common_Host %in% input$filter_species) |>
tidyr::pivot_wider(names_from = ESVId, id_cols = Barcode, values_from = Reads) |>
tibble::column_to_rownames(var = "Barcode") |>
dplyr::mutate(dplyr::across(dplyr::everything(), ~tidyr::replace_na(., 0))) |>
(\(x) x[rowSums(x) > 0, colSums(x) > 0])()
} else {
tmp_wide <- df |>
dplyr::filter(name_of_park %in% input$filter_park) |>
tidyr::pivot_wider(names_from = ESVId, id_cols = Barcode, values_from = Reads) |>
tibble::column_to_rownames(var = "Barcode") |>
dplyr::mutate(dplyr::across(dplyr::everything(), ~tidyr::replace_na(., 0))) |>
(\(x) x[rowSums(x) > 0, colSums(x) > 0])()
}
View(tmp_wide)
# NMDS ordination
set.seed(123)
tmp_nmds <- vegan::metaMDS(tmp_wide, trymax = 1)
# Site scores
tmp_sites <- vegan::scores(tmp_nmds)$sites |>
as.data.frame() |>
tibble::rownames_to_column(var = "Barcode") |>
dplyr::mutate(outlier_NMDS1 = flag_outliers(NMDS1),
outlier_NMDS2 = flag_outliers(NMDS2)) |>
dplyr::filter(!(outlier_NMDS1 | outlier_NMDS2)) |>
dplyr::left_join(rv$meta[,c("barcode_id", "species_id_dna_common", "name_of_park")], by = c("Barcode" = "barcode_id"))
xrange <- range(tmp_sites$NMDS1, na.rm = TRUE)
yrange <- range(tmp_sites$NMDS2, na.rm = TRUE)
tmp_spp <- vegan::scores(tmp_nmds, "species") |>
as.data.frame() |>
tibble::rownames_to_column(var = "ESVId") |>
dplyr::filter(dplyr::between(NMDS1, xrange[1], xrange[2]),
dplyr::between(NMDS2, yrange[1], yrange[2])) |>
dplyr::left_join(trnl_filtered()[,c("ESVId", "Class", "Order", "Family", "Genus", "Species")] |> dplyr::distinct(ESVId, .keep_all = T)) |>
dplyr::mutate(Species = ifelse(grepl("\\.|[0-9]", Species), NA, Species)) |>
dplyr::mutate(Consensus = paste(Class, Order, Family, Genus, Species, sep = ";"),
Consensus = gsub("\\;NA.*|\\;\\;.*", "", Consensus),
Consensus = stringr::str_remove(Consensus, ";$"),
Consensus = sub(".*;(.*)$", "\\1", Consensus),
Consensus = ifelse(Consensus %in% c("NA", ""), NA, Consensus)) |>
dplyr::mutate(
quadrant = dplyr::case_when(
NMDS1 >= 0 & NMDS2 >= 0 ~ "Q1",
NMDS1 <  0 & NMDS2 >= 0 ~ "Q2",
NMDS1 <  0 & NMDS2 <  0 ~ "Q3",
NMDS1 >= 0 & NMDS2 <  0 ~ "Q4"
),
dist = sqrt(NMDS1^2 + NMDS2^2)
) |>
dplyr::group_by(quadrant) |>
dplyr::slice_max(order_by = dist, n = 5, with_ties = FALSE)
tmp_spp <- vegan::scores(tmp_nmds, "species") |>
as.data.frame() |>
tibble::rownames_to_column(var = "ESVId") |>
dplyr::filter(dplyr::between(NMDS1, xrange[1], xrange[2]),
dplyr::between(NMDS2, yrange[1], yrange[2])) |>
dplyr::left_join(df[,c("ESVId", "Class", "Order", "Family", "Genus", "Species")] |> dplyr::distinct(ESVId, .keep_all = T)) |>
dplyr::mutate(Species = ifelse(grepl("\\.|[0-9]", Species), NA, Species)) |>
dplyr::mutate(Consensus = paste(Class, Order, Family, Genus, Species, sep = ";"),
Consensus = gsub("\\;NA.*|\\;\\;.*", "", Consensus),
Consensus = stringr::str_remove(Consensus, ";$"),
Consensus = sub(".*;(.*)$", "\\1", Consensus),
Consensus = ifelse(Consensus %in% c("NA", ""), NA, Consensus)) |>
dplyr::mutate(
quadrant = dplyr::case_when(
NMDS1 >= 0 & NMDS2 >= 0 ~ "Q1",
NMDS1 <  0 & NMDS2 >= 0 ~ "Q2",
NMDS1 <  0 & NMDS2 <  0 ~ "Q3",
NMDS1 >= 0 & NMDS2 <  0 ~ "Q4"
),
dist = sqrt(NMDS1^2 + NMDS2^2)
) |>
dplyr::group_by(quadrant) |>
dplyr::slice_max(order_by = dist, n = 5, with_ties = FALSE)
# Run PERMANOVA
if(length(unique(tmp_sites$species_id_dna_common)) > 1) {
permanova <- vegan::adonis2(tmp_wide ~ rv$meta$species_id_dna_common[match(rownames(tmp_wide), rv$meta$barcode_id)],
permutations = 99, method = "bray")
perm_stats <- permanova[1, ]
# perm_summary <- sprintf(
#   "PERMANOVA results (99 permutations):\nDF = %d\nSST = %.3f\nRÂ² = %.3f\nF = %.3f\np = %.3f",
#   perm_stats$Df, perm_stats$SumOfSqs, perm_stats$R2, perm_stats$F, perm_stats$`Pr(>F)`
# )
# permanova_text(perm_summary)
# Run pairwise PERMANOVA
group_vector <- rv$meta$species_id_dna_common[match(rownames(tmp_wide), rv$meta$barcode_id)]
pairwise_df <- rbind(
data.frame(Group1 = "All", Group2 = "All", Df = perm_stats$Df, R2 = round(perm_stats$R2, 3), `F` = round(perm_stats$`F`, 3), p = round(perm_stats$`Pr(>F)`, 3), p_Bonferroni = "", p_Holm = "", p_BH = ""),
pairwise_permanova(tmp_wide, group_vector) |>
dplyr::filter(!is.na(p)) |>
dplyr::arrange(-p) |>
dplyr::select(Group1, Group2, Df, R2, `F`, p, p_Bonferroni, p_Holm, p_BH)
)
permanova_table(pairwise_df)
}
ggplot2::ggplot(tmp_sites, ggplot2::aes(x = NMDS1, y = NMDS2, fill = species_id_dna_common)) +
ggiraph::geom_point_interactive(
aes(tooltip = paste0("Sample ID: ", Barcode, "\nPark: ", name_of_park, "\nConsumer: ", species_id_dna_common)),
color = "black", size = 3, shape = 21, alpha = 0.5
) +
ggrepel::geom_text_repel(data = tmp_spp,
ggplot2::aes(x = NMDS1, y = NMDS2, label = Consensus),
color = "black", size = 3,
inherit.aes = FALSE) +
ggplot2::labs(fill = "DNA-Inferred Host") +
ggplot2::theme_bw()
# Plot
tmp_p <- ggplot2::ggplot(tmp_sites, ggplot2::aes(x = NMDS1, y = NMDS2, fill = species_id_dna_common)) +
ggiraph::geom_point_interactive(
ggplot2::aes(tooltip = paste0("Sample ID: ", Barcode, "\nPark: ", name_of_park, "\nConsumer: ", species_id_dna_common)),
color = "black", size = 3, shape = 21, alpha = 0.5
) +
ggrepel::geom_text_repel(data = tmp_spp,
ggplot2::aes(x = NMDS1, y = NMDS2, label = Consensus),
color = "black", size = 3,
inherit.aes = FALSE) +
ggplot2::labs(fill = "DNA-Inferred Host") +
ggplot2::theme_bw()
tmp_p
golem:::run_dev()
tmp_p
golem:::run_dev()
View(rv$trnl)
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
View(rv$trnl)
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
setwd("~/Jonah Ventures Dropbox/Nick Schulte/Development_AfricanParks/african.parks")
golem:::run_dev()
golem:::run_dev()
rv <- list()
library(tidyverse)
rv$meta = read.csv("Metadata_20250519.csv", na.strings = c("", "NA")) |>
dplyr::mutate(latitude = ifelse(latitude < -1000405, NA, latitude),
name_of_park = ifelse(is.na(name_of_park), "kafue", name_of_park))
rv$vert = read.csv("12S_Summary_20250519.csv", na.strings = c("", "NA")) |>
dplyr::mutate(name_of_park = ifelse(is.na(name_of_park), "kafue", name_of_park))
rv$trnl = read.csv("trnL_Summary_20250519.csv", na.strings = c("", "NA")) |>
dplyr::filter(DNA_Diet_Host %in% "Herbivore")
View(rv$meta)
unique(rv$meta$location)
golem:::run_dev()
rv$meta = read.csv("Metadata_20250519.csv", na.strings = c("", "NA")) |>
dplyr::mutate(latitude = ifelse(latitude < -1000405, NA, latitude))
rv$vert = read.csv("12S_Summary_20250519.csv", na.strings = c("", "NA"))
tmp <- rv$meta |>
dplyr::mutate(name_of_park = stringr::str_to_title(ifelse(name_of_park %in% "odzala_okoua", "odzala", name_of_park))) |>
dplyr::group_by(name_of_park) |>
dplyr::summarize(
`12SVert 3` = sum(Reads_12SVert > 0, na.rm = TRUE),
`12SVert 2` = sum(Reads_12SVert == 0, na.rm = TRUE),
`12SVert 1` = sum(is.na(RunId_12SVert), na.rm = TRUE),
`trnL 3` = sum(Reads_trnL > 0, na.rm = TRUE),
`trnL 2` = sum(Reads_trnL == 0, na.rm = TRUE),
`trnL 1` = sum(is.na(RunId_trnL), na.rm = TRUE)
) |>
tidyr::pivot_longer(
cols = -name_of_park,
names_to = c("Assay", "Run"),
names_sep = " "
)
tmp <- rv$meta |>
dplyr::mutate(name_of_park = stringr::str_to_title(ifelse(name_of_park %in% "odzala_okoua", "odzala", name_of_park)))
View(tmp %>% filter(is.na(name_of_park)))
library(tidyverse)
View(tmp %>% filter(is.na(name_of_park)))
setdiff(unique(rv$vert$Barcode, rv$meta$barcode_id))
unique(setdiff(rv$vert$Barcode, rv$meta$barcode_id))
View(rv$meta)
View(rv$meta %>% filter(is.na(species_id)))
View(rv$meta %>% filter(is.na(DateRun)))
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
View(rv$vert %>% filter(DNA_Common_Prey == "African Buffalo"))
library(tidyverse)
View(rv$vert %>% filter(DNA_Common_Prey == "African Buffalo"))
golem:::run_dev()
input <- list()
input$filter_park = NULL
input$filter_species = NULL
input$filter_prey = "African Buffalo"
vert_filtered <- {df <- rv$vert |>
dplyr::filter(DNA_Diet_Host %in% c("Carnivore", "Omnivore"))
# Apply filters only if something is selected
if (!is.null(input$filter_park) && length(input$filter_park) > 0) {
df <- df[df$name_of_park %in% input$filter_park, ]
}
if (!is.null(input$filter_species) && length(input$filter_species) > 0) {
df <- df[df$DNA_Common_Host %in% input$filter_species, ]
}
df
}
View(vert_filtered)
golem:::run_dev()
vert_filtered <- {df <- rv$vert |>
dplyr::filter(DNA_Diet_Host %in% c("Carnivore", "Omnivore"))
# Apply filters only if something is selected
if (!is.null(input$filter_park) && length(input$filter_park) > 0) {
df <- df[df$name_of_park %in% input$filter_park, ]
}
if (!is.null(input$filter_species) && length(input$filter_species) > 0) {
df <- df[df$DNA_Common_Host %in% input$filter_species, ]
}
if (!is.null(input$filter_prey) && length(input$filter_prey) > 0) {
df <- df[df$DNA_Common_Prey %in% input$filter_prey, ]
}
df
}
df <- vert_filtered |>
dplyr::filter(!is.na(DNA_Common_Prey)) |>
dplyr::group_by(Barcode, name_of_park, DNA_Common_Host, DNA_Common_Prey) |>
dplyr::summarize(RRA_Prey = sum(RRA_Prey, na.rm = TRUE), .groups = "drop")
if (!is.null(input$filter_park) && length(input$filter_park) > 0) {
df <- df[df$name_of_park %in% input$filter_park, ]
}
if (!is.null(input$filter_species) && length(input$filter_species) > 0) {
df <- df[df$DNA_Common_Host %in% input$filter_species, ]
}
if (!is.null(input$filter_prey) && length(input$filter_prey) > 0) {
df <- df[df$DNA_Common_Prey %in% input$filter_prey, ]
}
req(nrow(df) > 0)
if(length(unique(df$Barcode)) >= 2) {
clustered_order <- df |>
dplyr::select(Barcode, name_of_park, DNA_Common_Prey, RRA_Prey) |>
tidyr::pivot_wider(
id_cols = c(Barcode, name_of_park),
names_from = DNA_Common_Prey,
values_from = RRA_Prey,
values_fill = 0
) |>
dplyr::group_split(name_of_park) |>
purrr::keep(~ dplyr::n_distinct(.x$Barcode) >= 2) |>
purrr::map_df(~ {
mat <- as.matrix(dplyr::select(.x, -Barcode, -name_of_park))
rownames(mat) <- .x$Barcode
hc <- hclust(dist(mat))
tibble::tibble(
Barcode = hc$labels[hc$order],
order = seq_along(hc$order),
name_of_park = unique(.x$name_of_park)
)
})
df <- df |>
dplyr::left_join(clustered_order, by = c("Barcode", "name_of_park")) |>
dplyr::mutate(Barcode = factor(Barcode, levels = clustered_order$Barcode[order(clustered_order$order)]))
df
}
prey_composition_data = df
ggplot2::ggplot(prey_composition_data, ggplot2::aes(x = Barcode, y = RRA_Prey, fill = DNA_Common_Prey)) +
ggplot2::facet_grid(~ name_of_park, scales = "free_x", space = "free_x") +
ggiraph::geom_bar_interactive(
ggplot2::aes(
tooltip = paste0("Sample ID: ", Barcode, "\nPark: ", name_of_park, "\nConsumer: ", DNA_Common_Host, "\nPrey: ", DNA_Common_Prey, "\nRRA: ", RRA_Prey),
group = DNA_Common_Prey
),
stat = "identity", alpha = 0.7
) +
ggplot2::labs(y = "Relative Read Abundance") +
ggplot2::guides(fill = "none") +
ggplot2::theme_bw() +
ggplot2::theme(
axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
strip.background = ggplot2::element_blank(),
strip.clip = "off",
panel.grid.major.x = ggplot2::element_blank(),
panel.grid.minor.y = ggplot2::element_blank(),
panel.border = ggplot2::element_blank(),
panel.spacing = ggplot2::unit(0, "lines")
)
golem:::run_dev()
input$filter_prey = "African Civet"
vert_filtered <- {df <- rv$vert |>
dplyr::filter(DNA_Diet_Host %in% c("Carnivore", "Omnivore"))
# Apply filters only if something is selected
if (!is.null(input$filter_park) && length(input$filter_park) > 0) {
df <- df[df$name_of_park %in% input$filter_park, ]
}
if (!is.null(input$filter_species) && length(input$filter_species) > 0) {
df <- df[df$DNA_Common_Host %in% input$filter_species, ]
}
if (!is.null(input$filter_prey) && length(input$filter_prey) > 0) {
df <- df[df$DNA_Common_Prey %in% input$filter_prey, ]
}
df
}
View(vert_filtered)
df <- vert_filtered |>
dplyr::filter(!is.na(DNA_Common_Prey)) |>
dplyr::group_by(Barcode, name_of_park, DNA_Common_Host, DNA_Common_Prey) |>
dplyr::summarize(RRA_Prey = sum(RRA_Prey, na.rm = TRUE), .groups = "drop")
if (!is.null(input$filter_park) && length(input$filter_park) > 0) {
df <- df[df$name_of_park %in% input$filter_park, ]
}
if (!is.null(input$filter_species) && length(input$filter_species) > 0) {
df <- df[df$DNA_Common_Host %in% input$filter_species, ]
}
if (!is.null(input$filter_prey) && length(input$filter_prey) > 0) {
df <- df[df$DNA_Common_Prey %in% input$filter_prey, ]
}
req(nrow(df) > 0)
if(length(unique(df$Barcode)) >= 2) {
clustered_order <- df |>
dplyr::select(Barcode, name_of_park, DNA_Common_Prey, RRA_Prey) |>
tidyr::pivot_wider(
id_cols = c(Barcode, name_of_park),
names_from = DNA_Common_Prey,
values_from = RRA_Prey,
values_fill = 0
) |>
dplyr::group_split(name_of_park) |>
purrr::keep(~ dplyr::n_distinct(.x$Barcode) >= 2) |>
purrr::map_df(~ {
mat <- as.matrix(dplyr::select(.x, -Barcode, -name_of_park))
rownames(mat) <- .x$Barcode
hc <- hclust(dist(mat))
tibble::tibble(
Barcode = hc$labels[hc$order],
order = seq_along(hc$order),
name_of_park = unique(.x$name_of_park)
)
})
df <- df |>
dplyr::left_join(clustered_order, by = c("Barcode", "name_of_park")) |>
dplyr::mutate(Barcode = factor(Barcode, levels = clustered_order$Barcode[order(clustered_order$order)]))
df
}
df <- vert_filtered |>
dplyr::filter(!is.na(DNA_Common_Prey)) |>
dplyr::group_by(Barcode, name_of_park, DNA_Common_Host, DNA_Common_Prey) |>
dplyr::summarize(RRA_Prey = sum(RRA_Prey, na.rm = TRUE), .groups = "drop")
if (!is.null(input$filter_park) && length(input$filter_park) > 0) {
df <- df[df$name_of_park %in% input$filter_park, ]
}
if (!is.null(input$filter_species) && length(input$filter_species) > 0) {
df <- df[df$DNA_Common_Host %in% input$filter_species, ]
}
if (!is.null(input$filter_prey) && length(input$filter_prey) > 0) {
df <- df[df$DNA_Common_Prey %in% input$filter_prey, ]
}
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
input$filter_prey = "African Civet"
vert_filtered <- {df <- rv$vert |>
dplyr::filter(DNA_Diet_Host %in% c("Carnivore", "Omnivore"))
# Apply filters only if something is selected
if (!is.null(input$filter_park) && length(input$filter_park) > 0) {
df <- df[df$name_of_park %in% input$filter_park, ]
}
if (!is.null(input$filter_species) && length(input$filter_species) > 0) {
df <- df[df$DNA_Common_Host %in% input$filter_species, ]
}
if (!is.null(input$filter_prey) && length(input$filter_prey) > 0) {
df <- df[df$DNA_Common_Prey %in% input$filter_prey, ]
}
df
}
df <- vert_filtered |>
dplyr::filter(!is.na(DNA_Common_Prey)) |>
dplyr::group_by(Barcode, name_of_park, DNA_Common_Host, DNA_Common_Prey) |>
dplyr::summarize(RRA_Prey = sum(RRA_Prey, na.rm = TRUE), .groups = "drop")
if (!is.null(input$filter_park) && length(input$filter_park) > 0) {
df <- df[df$name_of_park %in% input$filter_park, ]
}
if (!is.null(input$filter_species) && length(input$filter_species) > 0) {
df <- df[df$DNA_Common_Host %in% input$filter_species, ]
}
if (!is.null(input$filter_prey) && length(input$filter_prey) > 0) {
df <- df[df$DNA_Common_Prey %in% input$filter_prey, ]
}
req(nrow(df) > 0)
prey_composition_data <- df
ggplot2::ggplot(prey_composition_data, ggplot2::aes(x = Barcode, y = RRA_Prey, fill = DNA_Common_Prey)) +
ggplot2::facet_grid(~ name_of_park, scales = "free_x", space = "free_x") +
ggiraph::geom_bar_interactive(
ggplot2::aes(
tooltip = paste0("Sample ID: ", Barcode, "\nPark: ", name_of_park, "\nConsumer: ", DNA_Common_Host, "\nPrey: ", DNA_Common_Prey, "\nRRA: ", RRA_Prey),
group = DNA_Common_Prey
),
stat = "identity", alpha = 0.7
) +
ggplot2::labs(y = "Relative Read Abundance") +
ggplot2::guides(fill = "none") +
ggplot2::theme_bw() +
ggplot2::theme(
axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
strip.background = ggplot2::element_blank(),
strip.clip = "off",
panel.grid.major.x = ggplot2::element_blank(),
panel.grid.minor.y = ggplot2::element_blank(),
panel.border = ggplot2::element_blank(),
panel.spacing = ggplot2::unit(0, "lines")
)
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem:::run_dev()
golem::add_dependencies()
golem::document_and_reload()
warnings()
devtools::install(dependencies = TRUE)
golem:::run_dev()
renv::restore()
install.packages("Matrix")
renv::restore()
golem:::run_dev()
install.packages("Matrix", type = "source")
renv::restore(repos = "https://cran.rstudio.com", type = "binary")
pkgbuild::check_build_tools(debug = TRUE)
options(pkgType = "binary")
renv::restore()
options(pkgType = "binary")
renv::restore()
install.packages("devtools")
renv::restore()
library(devtools)
renv::restore()
install.packages("pak")
pak::pak("Matrix")
renv::restore()
renv::install("Matrix", library = .libPaths()[1])
renv::settings$ignored.packages("Matrix")
renv::restore()
renv::lockfile$load("renv.lock") %>%
renv::lockfile$remove("Matrix") %>%
renv::lockfile$save("renv.lock")
library(tidyverse)
library(dplyr)
renv::lockfile$load("renv.lock") |>
renv::lockfile$remove("Matrix") |>
renv::lockfile$save("renv.lock")
renv::modify(function(lockfile) {
lockfile$Packages$Matrix <- NULL
lockfile
})
renv::restore()
renv::restore()
url <- "https://github.com/fxcoudert/gfortran-for-macOS/releases/download/14.2-sonoma/gfortran-ARM-14.2-Sonoma.dmg"
dest <- tempfile(fileext = ".dmg")
download.file(url, dest)
# Mount the DMG and install
system(sprintf("hdiutil attach %s", dest))
system("sudo installer -pkg /Volumes/gfortran-13.2-arm64/gfortran.pkg -target /")
system("/opt/gfortran/bin/gfortran --version")
system("/opt/gfortran/bin/gfortran --version")
system("/opt/gfortran/bin/gfortran --version")
renv::restore()
renv::restore()
renv::restore()
renv::restore()
renv::restore()
golem:::run_dev()
renv::restore()
renv::restore()
golem:::run_dev()
golem:::run_dev()
